{"version":3,"file":"static/js/860.3a392d4c.chunk.js","mappings":"sJACA,MAAuB,qB,gDCAvB,EAAwB,sBAAxB,EAA2D,2BAA3D,EAA6F,qB,oECahFA,EAAc,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,OAC5B,EAMIC,EAAAA,GAAAA,oBALIC,EADR,EACEC,KACAC,EAFF,EAEEA,WACAC,EAHF,EAGEA,MACAC,EAJF,EAIEA,QACAC,EALF,EAKEA,UAGIC,GAAiBC,EAAAA,EAAAA,cAAW,iBAAC,8FAC3BH,EAAQ,CAAEI,MAAON,EAAWM,QADD,2CAEhC,CAACN,EAAWM,MAAOJ,IAEtB,EAA8BK,EAAAA,GAAAA,iBAAtBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAEVC,GAAYC,EAAAA,EAAAA,QAAuB,MAEzC,EASId,EAAAA,GAAAA,gCATJ,eACEe,EADF,YAGUC,EAHV,EAGId,KACYe,EAJhB,EAIId,WACOe,EALX,EAKId,MACWe,EANf,EAMIb,UACgBc,EAPpB,EAOIb,eAIEc,EAAa,mCAAG,WAAOC,GAAP,0EAEiB,KAAjC,UAAAT,EAAUU,eAAV,eAAmBC,WAFH,gCAGZT,EAAe,CACnBU,EAAGH,GAAeX,EAClBe,MAAwB,OAAlBT,QAAkB,IAAlBA,OAAA,EAAAA,EAAoBS,OAAQ,IALlB,2CAAH,sDAUbC,EAAiB,mCAAG,8FAClBP,EAAuB,CAC3BK,EAAGd,EACHe,KAAI,OAAET,QAAF,IAAEA,OAAF,EAAEA,EAAoBS,OAHJ,2CAAH,qDAOjBE,EAAc,mCAAG,WAAOC,GAAP,0EACfP,EAAcO,EAAEC,OAAOC,MAC7BnB,EAAUU,IACNA,EAHiB,gCAIbD,EAAcC,GAJD,2CAAH,sDAQdU,GAAwBC,EAAAA,EAAAA,UAC5B,kBAAMC,GAAAA,CAASN,EAAgB,OAE/B,IAGIO,EAAaxB,EAASK,EAAgBf,EAEtCmC,GAASH,EAAAA,EAAAA,UACb,kBACEf,GAAiBd,GACf,wBAAKc,GAAiBd,IACpBE,GAAaa,GACf,SAAC,KAAD,IAEA,YAEJ,CAACD,EAAed,EAAOE,EAAWa,IAGpC,OACE,4BACE,SAAC,KAAD,CACEkB,SAAUL,EACVM,UAAWC,EACXC,aAAc7B,KAEhB,gBAAK8B,IAAK5B,EAAW6B,GAAI3C,EAAQuC,UAAWC,EAA5C,UACE,SAAC,IAAD,CACEI,WAAYhC,EAASK,EAAc4B,OAAS3C,EAAM2C,OAClDC,KAAMlC,EAASgB,EAAoBpB,EACnCuC,SAAS,EACTC,iBAAkBhD,EAClBqC,OAAQA,EACRY,YACE,cAAGC,MAAO,CAAEC,UAAW,UAAvB,UACE,uDARN,SAYGf,EAAWgB,KAAI,SAACC,GAAD,OACd,SAAC,KAAD,CAAuBC,GAAID,EAAKE,MAAOhB,UAAWC,EAAlD,UACE,SAAC,KAAD,CAASrC,KAAMkD,KADNA,EAAKE,kBC/F5B,EARkB,WAChB,OACE,gBAAKhB,UAAWC,EAAhB,UACE,SAACzC,EAAD,CAAaC,OAAO","sources":["webpack://gh-stats/./src/pages/users/styles.module.scss?97fc","webpack://gh-stats/./src/features/users-search/ui/styles.module.scss?02ba","features/users-search/ui/index.tsx","pages/users/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"styles_root__H8q0E\"};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"styles_input__hEL+d\",\"scrollable\":\"styles_scrollable__9Q5Op\",\"link\":\"styles_link__XLDo9\"};","import styles from './styles.module.scss';\n\nimport React, { useCallback, useMemo, useRef } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { userModel, UserRow } from 'entities/user';\nimport { Input, Loader } from 'shared/ui';\nimport { userHooks } from 'entities/user';\nimport { Link } from 'react-router-dom';\nimport debounce from 'lodash.debounce';\n\ninterface Props {\n  nodeId: string;\n}\n\nexport const UsersSearch = ({ nodeId }: Props) => {\n  const {\n    data: users,\n    pagination,\n    error,\n    refetch,\n    isLoading,\n  } = userHooks.useFetchUsersList();\n\n  const fetchNextUsers = useCallback(async () => {\n    await refetch({ since: pagination.since });\n  }, [pagination.since, refetch]);\n\n  const { search, setSearch } = userModel.useUserContext();\n\n  const scrollRef = useRef<HTMLDivElement>(null);\n\n  const [\n    getSearchUsers,\n    {\n      data: searchedUsers,\n      pagination: searchedPagination,\n      error: searchedError,\n      isLoading: isSearchedLoading,\n      fetchNextUsers: fetchNextSearchedUsers,\n    },\n  ] = userHooks.useLazyFetchSearchedUsersList();\n\n  const fetchSearched = async (searchValue: string) => {\n    // preventing infinity-scroll-component from fetching twice when it was scrolled from top\n    if (scrollRef.current?.scrollTop === 0) {\n      await getSearchUsers({\n        q: searchValue || search,\n        page: searchedPagination?.page || 1,\n      });\n    }\n  };\n\n  const fetchNextSearched = async () => {\n    await fetchNextSearchedUsers({\n      q: search,\n      page: searchedPagination?.page,\n    });\n  };\n\n  const onSearchChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchValue = e.target.value;\n    setSearch(searchValue);\n    if (searchValue) {\n      await fetchSearched(searchValue);\n    }\n  };\n\n  const debouncedSearchChange = useMemo(\n    () => debounce(onSearchChange, 800),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const mappedList = search ? searchedUsers : users;\n\n  const loader = useMemo(\n    () =>\n      searchedError || error ? (\n        <h4>{searchedError || error}</h4>\n      ) : isLoading || isSearchedLoading ? (\n        <Loader />\n      ) : (\n        'No data'\n      ),\n    [searchedError, error, isLoading, isSearchedLoading]\n  );\n\n  return (\n    <div>\n      <Input\n        onChange={debouncedSearchChange}\n        className={styles.input}\n        defaultValue={search}\n      />\n      <div ref={scrollRef} id={nodeId} className={styles.scrollable}>\n        <InfiniteScroll\n          dataLength={search ? searchedUsers.length : users.length}\n          next={search ? fetchNextSearched : fetchNextUsers}\n          hasMore={true}\n          scrollableTarget={nodeId}\n          loader={loader}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        >\n          {mappedList.map((user) => (\n            <Link key={user.login} to={user.login} className={styles.link}>\n              <UserRow data={user} />\n            </Link>\n          ))}\n        </InfiniteScroll>\n      </div>\n    </div>\n  );\n};\n","import styles from './styles.module.scss';\n\nimport React from 'react';\nimport { UsersSearch } from 'features/users-search';\n\nconst UsersPage = () => {\n  return (\n    <div className={styles.root}>\n      <UsersSearch nodeId=\"users-page-scroll\" />\n    </div>\n  );\n};\n\nexport default UsersPage;\n"],"names":["UsersSearch","nodeId","userHooks","users","data","pagination","error","refetch","isLoading","fetchNextUsers","useCallback","since","userModel","search","setSearch","scrollRef","useRef","getSearchUsers","searchedUsers","searchedPagination","searchedError","isSearchedLoading","fetchNextSearchedUsers","fetchSearched","searchValue","current","scrollTop","q","page","fetchNextSearched","onSearchChange","e","target","value","debouncedSearchChange","useMemo","debounce","mappedList","loader","onChange","className","styles","defaultValue","ref","id","dataLength","length","next","hasMore","scrollableTarget","endMessage","style","textAlign","map","user","to","login"],"sourceRoot":""}