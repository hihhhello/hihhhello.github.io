{"version":3,"file":"static/js/860.98857a43.chunk.js","mappings":"uLACA,EAAuB,qB,6BCAvB,EAAwB,sBAAxB,EAA2D,2BAA3D,EAA6F,qB,0DCiBhFA,EAAc,SAAC,GAAoD,IAAlDC,EAAiD,EAAjDA,KAAMC,EAA2C,EAA3CA,OAAQC,EAAmC,EAAnCA,WAAYC,EAAuB,EAAvBA,UACtD,EAA8BC,EAAAA,GAAAA,iBAAtBC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,UAEhB,EASIC,EAAAA,GAAAA,gCATJ,eACEC,EADF,YAGUC,EAHV,EAGIC,KACAC,EAJJ,EAIIA,WACAC,EALJ,EAKIA,MACWC,EANf,EAMIV,UACAW,EAPJ,EAOIA,eAIEC,EAAa,mCAAG,WAAOC,GAAP,iFACdR,EAAe,CACnBS,EAAGD,GAAeX,EAClBa,MAAgB,OAAVP,QAAU,IAAVA,OAAA,EAAAA,EAAYO,OAAQ,IAHR,2CAAH,sDAMbC,EAAiB,mCAAG,8FAClBL,EAAe,CACnBG,EAAGZ,EACHa,KAAI,OAAEP,QAAF,IAAEA,OAAF,EAAEA,EAAYO,OAHI,2CAAH,qDAOjBE,EAAc,mCAAG,WAAOC,GAAP,0EACfL,EAAcK,EAAEC,OAAOC,MAC7BjB,EAAUU,IACNA,EAHiB,gCAIbD,EAAcC,GAJD,2CAAH,sDAQdQ,GAAwBC,EAAAA,EAAAA,UAC5B,kBAAMC,GAAAA,CAASN,EAAgB,OAE/B,IAGIO,EAAatB,EAASI,EAAgBT,EAEtC4B,GAASH,EAAAA,EAAAA,UACb,kBACEb,GACE,wBAAKA,IACHT,GAAaU,EACf,aAEA,YAEJ,CAACD,EAAOT,EAAWU,IAGrB,OACE,4BACE,SAAC,KAAD,CACEgB,SAAUL,EACVM,UAAWC,EACXC,aAAc3B,KAEhB,gBAAK4B,GAAIhC,EAAQ6B,UAAWC,EAA5B,UACE,SAAC,IAAD,CACEG,WAAY7B,EAASI,EAAc0B,OAASnC,EAAKmC,OACjDC,KAAM/B,EAASc,EAAoBjB,EACnCmC,SAAS,EACTC,iBAAkBrC,EAClB2B,OAAQA,EACRW,YACE,cAAGC,MAAO,CAAEC,UAAW,UAAvB,UACE,uDARN,SAYGd,EAAWe,KAAI,SAACC,GAAD,OACd,SAAC,KAAD,CAAuBC,GAAID,EAAKE,MAAOf,UAAWC,EAAlD,UACE,SAAC,KAAD,CAASrB,KAAMiC,KADNA,EAAKE,kBCpE5B,EApBkB,WAChB,MACEtC,EAAAA,GAAAA,oBADMG,EAAR,EAAQA,KAAMC,EAAd,EAAcA,WAAYmC,EAA1B,EAA0BA,QAAS3C,EAAnC,EAAmCA,UAG7BW,GAAiBiC,EAAAA,EAAAA,cAAW,iBAAC,8FAC3BD,EAAQ,CAAEE,MAAOrC,EAAWqC,QADD,2CAEhC,CAACrC,EAAWqC,MAAOF,IAEtB,OACE,gBAAKhB,UAAWC,EAAhB,UACE,SAAChC,EAAD,CACEE,OAAO,oBACPC,WAAYY,EACZd,KAAMU,EACNP,UAAWA","sources":["webpack://gh-stats/./src/pages/users/styles.module.scss?97fc","webpack://gh-stats/./src/features/users-search/ui/styles.module.scss?02ba","features/users-search/ui/index.tsx","pages/users/index.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"root\":\"styles_root__H8q0E\"};","// extracted by mini-css-extract-plugin\nexport default {\"input\":\"styles_input__hEL+d\",\"scrollable\":\"styles_scrollable__9Q5Op\",\"link\":\"styles_link__XLDo9\"};","import styles from './styles.module.scss';\n\nimport React, { useMemo } from 'react';\nimport InfiniteScroll from 'react-infinite-scroll-component';\nimport { UserPreview } from 'shared/api';\nimport { userModel, UserRow } from 'entities/user';\nimport { Input } from 'shared/ui';\nimport { userHooks } from 'entities/user';\nimport { Link } from 'react-router-dom';\nimport debounce from 'lodash.debounce';\n\ninterface Props {\n  nodeId: string;\n  list: UserPreview[];\n  isLoading: boolean;\n  fetchUsers: () => Promise<void>;\n}\n\nexport const UsersSearch = ({ list, nodeId, fetchUsers, isLoading }: Props) => {\n  const { search, setSearch } = userModel.useUserContext();\n\n  const [\n    getSearchUsers,\n    {\n      data: searchedUsers,\n      pagination,\n      error,\n      isLoading: isSearchedLoading,\n      fetchNextUsers,\n    },\n  ] = userHooks.useLazyFetchSearchedUsersList();\n\n  const fetchSearched = async (searchValue?: string) => {\n    await getSearchUsers({\n      q: searchValue || search,\n      page: pagination?.page || 1,\n    });\n  };\n  const fetchNextSearched = async () => {\n    await fetchNextUsers({\n      q: search,\n      page: pagination?.page,\n    });\n  };\n\n  const onSearchChange = async (e: React.ChangeEvent<HTMLInputElement>) => {\n    const searchValue = e.target.value;\n    setSearch(searchValue);\n    if (searchValue) {\n      await fetchSearched(searchValue);\n    }\n  };\n\n  const debouncedSearchChange = useMemo(\n    () => debounce(onSearchChange, 800),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    []\n  );\n\n  const mappedList = search ? searchedUsers : list;\n\n  const loader = useMemo(\n    () =>\n      error ? (\n        <h4>{error}</h4>\n      ) : isLoading || isSearchedLoading ? (\n        'Loading...'\n      ) : (\n        'No data'\n      ),\n    [error, isLoading, isSearchedLoading]\n  );\n\n  return (\n    <div>\n      <Input\n        onChange={debouncedSearchChange}\n        className={styles.input}\n        defaultValue={search}\n      />\n      <div id={nodeId} className={styles.scrollable}>\n        <InfiniteScroll\n          dataLength={search ? searchedUsers.length : list.length}\n          next={search ? fetchNextSearched : fetchUsers}\n          hasMore={true}\n          scrollableTarget={nodeId}\n          loader={loader}\n          endMessage={\n            <p style={{ textAlign: 'center' }}>\n              <b>Yay! You have seen it all</b>\n            </p>\n          }\n        >\n          {mappedList.map((user) => (\n            <Link key={user.login} to={user.login} className={styles.link}>\n              <UserRow data={user} />\n            </Link>\n          ))}\n        </InfiniteScroll>\n      </div>\n    </div>\n  );\n};\n","import styles from './styles.module.scss';\n\nimport React, { useCallback } from 'react';\nimport { userHooks } from 'entities/user';\nimport { UsersSearch } from 'features/users-search';\n\nconst UsersPage = () => {\n  const { data, pagination, refetch, isLoading } =\n    userHooks.useFetchUsersList();\n\n  const fetchNextUsers = useCallback(async () => {\n    await refetch({ since: pagination.since });\n  }, [pagination.since, refetch]);\n\n  return (\n    <div className={styles.root}>\n      <UsersSearch\n        nodeId=\"users-page-scroll\"\n        fetchUsers={fetchNextUsers}\n        list={data}\n        isLoading={isLoading}\n      />\n    </div>\n  );\n};\n\nexport default UsersPage;\n"],"names":["UsersSearch","list","nodeId","fetchUsers","isLoading","userModel","search","setSearch","userHooks","getSearchUsers","searchedUsers","data","pagination","error","isSearchedLoading","fetchNextUsers","fetchSearched","searchValue","q","page","fetchNextSearched","onSearchChange","e","target","value","debouncedSearchChange","useMemo","debounce","mappedList","loader","onChange","className","styles","defaultValue","id","dataLength","length","next","hasMore","scrollableTarget","endMessage","style","textAlign","map","user","to","login","refetch","useCallback","since"],"sourceRoot":""}